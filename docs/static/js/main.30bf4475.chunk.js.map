{"version":3,"sources":["utils/images.js","actions/index.js","components/Home.js","components/About.js","utils/googleImages.js","components/Spinner.js","components/Details.js","components/Card.js","components/Timer.js","components/GameOver.js","components/Game.js","utils/api.js","components/Ranking.js","components/Routes.js","components/Nav.js","App.js","reducers/index.js","index.js"],"names":["LOGO","gameStatus","status","type","updateScore","score","resetScore","Home","onClickStart","_this","props","dispatch","this","react_default","a","createElement","className","src","alt","style","logo","Link","to","onClick","Component","maxHeight","connect","state","jumbotron","backgroundColor","About","CSE_ID","API_KEY","spinner","width","height","Spinner","role","Details","species","hair","homeworld","films","vehicles","loading","onSetHeight","setState","onSetHair","onGetSpecies","card","map","specie","axios","get","then","response","newSpecies","push","data","name","catch","error","console","log","onGetHomeWorld","onGetVehicles","vehicle","newVehicles","onGetFilms","film","newFilms","title","hair_color","id","concat","cardId","tabIndex","aria-labelledby","aria-hidden","components_Spinner","cardImage","key","data-dismiss","maxWeight","Card","_Component","_getPrototypeOf2","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","thumbnail","image","userGuess","showInput","clickedDetails","newClasses","getImageToCard","GoogleImages","search","url","onPressGuess","onPressSendGuess","toUpperCase","cardName","addNewClasses","onChangeGuess","event","target","value","onClickDetails","inherits","createClass","_this2","placeholder","onChange","data-toggle","data-target","components_Details","game","index_es","icon","faStopwatch","size","dist_index_es","date","Date","now","renderer","_ref","minutes","seconds","onComplete","GameOver","email","onSaveScore","localStorage","addPlayerToLocalStorage","setItem","JSON","stringify","history","players","parse","getItem","newPlayer","onChangeName","onChangeEmail","required","Game","cards","nextPage","loadingMoreCards","loadingMoreCardsNewClasses","onClickNextPage","getCards","results","next","previousPage","previous","components_Timer","keys","index","components_Card","components_GameOver","Ranking","scope","sort","b","player","Routes","Route","exact","path","component","Nav","pathName","location","pathname","aria-controls","aria-expanded","aria-label","NavWithRouter","withRouter","App","components_Nav","components_Routes","combineReducers","undefined","action","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.30bf4475.chunk.js","sourcesContent":["export const LOGO = \"https://pngimage.net/wp-content/uploads/2018/05/darth-vader-face-png.png\"","export const GAME_STATUS = 'GAME_STATUS'\nexport const UPDATE_SCORE = 'UPDATE_SCORE'\nexport const RESET_SCORE = 'RESET_SCORE'\n\n// ATUALIZA O STATUS DO JOGO PARA TRUE OR FALSE (TRUE: TEMPO DISPONIVEL, FALSE: TEMPO ACABOU)\nexport const gameStatus = status => {\n    return {\n        type: GAME_STATUS,\n        status\n    }\n}\n\n// ATUALIZA A STORE COM A PONTUAÇAO RECEBIDA PELO USUARIO AO ACERTAR UMA QUESTAO\nexport const updateScore = score => {\n    return {\n        type: UPDATE_SCORE,\n        score\n    }\n}\n\n// RESETA O OBJETO SCORE DA STORE COM 0 PONTOS\nexport const resetScore = () => {\n    return {\n        type: RESET_SCORE\n    }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { LOGO } from '../utils/images'\nimport { connect } from 'react-redux'\nimport { gameStatus, resetScore } from '../actions'\n\nclass Home extends Component {\n\n    componentDidMount(){\n        this.props.dispatch(gameStatus(true))\n    }\n\n    // MUDA O STATUS DO JOGO PARA TRUE (INICIA CONTADOR DE TEMPO)\n    // RESETA O SCORE PARA ZERO CASO O JOGADOR JA TENHA JOGADO NA MESMA SESSAO\n    onClickStart = () => {\n        this.props.dispatch(gameStatus(true))\n        this.props.dispatch(resetScore())\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"text-center\">\n                    <div><img src={LOGO} alt=\"darth vader banner\" className=\"img-fluid mt-3 animated zoomIn\" style={style.logo}></img></div>\n                    <h2 className=\"mt-5\">StarQuiz!</h2>\n                    <Link to=\"/game\" className=\"btn btn-light btn-lg mt-3\" onClick={this.onClickStart}>Jogar!</Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst style = {\n    logo: {\n        maxHeight: 260\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps)(Home)","import React from 'react'\n\nconst About = () => {\n    return (\n        <div className=\"container mt-2 mb-4\">\n            <div className=\"jumbotron-fluid\" style={style.jumbotron}>\n                <h1><strong>Sobre o Jogo</strong></h1>\n                <p className=\"lead mt-3\">StarQuiz é um jogo onde você deve testar os seus conhecimentos sobre os personagens da franquia Star Wars.</p>\n                <hr className=\"my-4\" />\n                <h3 className=\"mt-2\"><strong>Como Jogar?</strong></h3>\n                <p>Ao iniciar o jogo, clique no botão advinhar e digite o nome do personagem na caixa, em seguida clique em OK para verificar se acertou ou errou.</p>\n                <h3 className=\"mt-2\"><strong>Tempo</strong></h3>\n                <p>Quando o jogo começar, você tera dois minutos para tentar advinhar o máximo de personagens que conseguir.</p>\n                <h3 className=\"mt-2\"><strong>Pontuação</strong></h3>\n                <p>Cada personagem que você acertar vale 10 pontos, se você clicar no cartão de detalhes do personagem essa pontuação vai para 5 pontos. O cartão do personagem mudará de cor quando você enviar o seu palpite, se ficar verde significa que você acertou, se ficar vermelho significa que você errou.</p>\n                <h3 className=\"mt-2\"><strong>Ranking</strong></h3>\n                <p>Após o fim do jogo, você pode verificar a sua pontuação e decidir se quer deixar registrado em nosso ranking de jogadores, para isso, basta preencher o formulário com seu nome e email.</p>\n            </div>\n        </div>\n    )\n}\n\nconst style = {\n    jumbotron: {\n        backgroundColor: 'none'\n    }\n}\n\nexport default About","export const CSE_ID = \"018057695921300292746:9ootm9o6fja\"\nexport const API_KEY = \"AIzaSyANFxwiuG17P7aFONR2qpgdo4BHMyVK3dI\"","import React from 'react'\n\nconst Spinner = () => {\n    return (\n        <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border m-5 fast\" role=\"status\" style={style.spinner}>\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    )\n}\n\nconst style = {\n    spinner: {\n        width: '3rem',\n        height: '3rem'\n    }\n}\nexport default Spinner","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Spinner from './Spinner'\n\nclass Details extends Component {\n    state = {\n        species: [],\n        height: '',\n        hair: '',\n        homeworld: '',\n        films: [],\n        vehicles: [],\n        // INICIA O COMPONENTE COM O LOADING EM TRUE\n        loading: true\n    }\n\n    // REQUISITA OS DETALHES DE CADA PERSONAGEM\n    componentDidMount() {\n        let card = this.props.card\n        this.onGetSpecies(card)\n        this.onGetHomeWorld(card)\n        this.onGetFilms(card)\n        this.onGetVehicles(card)\n        this.onSetHeight(card.height)\n        this.onSetHair(card.hair_color)\n    }\n\n    // ATUALIZA O STATE COM O PROP RECEBIDO\n    onSetHeight = height => {\n        this.setState({\n            height\n        })\n    }\n\n    // ATUALIZA O STATE COM O PROP RECEBIDO\n    onSetHair = hair => {\n        this.setState({\n            hair\n        })\n    }\n\n    // REQUISITA AS ESPECIES DO PERSONAGEM\n    onGetSpecies = card => {\n        card.species.map(specie => (\n            axios.get(specie)\n                .then(response => {\n                    let newSpecies = this.state.species\n                    newSpecies.push(response.data.name)\n                    this.setState({\n                        species: newSpecies\n                    })\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        ))\n    }\n\n    // REQUISITA O PLANETA DO PERSONAGEM\n    onGetHomeWorld = card => {\n        axios.get(card.homeworld)\n            .then(response => {\n                this.setState({\n                    homeworld: response.data.name\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    // REQUISITA OS VEICULOS DO PERSONAGEM\n    onGetVehicles = card => {\n        card.vehicles.map(vehicle => (\n            axios.get(vehicle)\n                .then(response => {\n                    let newVehicles = this.state.vehicles\n                    newVehicles.push(response.data.name)\n                    this.setState({\n                        vehicles: newVehicles\n                    })\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        ))\n    }\n\n    // REQUISITA OS FILMES DO PERSONAGEM\n    onGetFilms = card => {\n        card.films.map(film => (\n            axios.get(film)\n                .then(response => {\n                    let newFilms = this.state.films\n                    newFilms.push(response.data.title)\n                    this.setState({\n                        films: newFilms,\n                        // FINALIZA O LOADING AO CARREGAR A REQUISIÇAO MAIS PESADA (ARRAY DE FILMES)\n                        loading: false\n                    })\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        ))\n    }\n\n    render() {\n        return (\n            <div className=\"modal fade\" id={`${(this.props.cardId)}`} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"detailsModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"detailsModalLabel\">Detalhes do Personagem</h5>\n                        </div>\n                        <div className=\"modal-body\">\n                            {/* VERIFICA SE O LOADING ESTA ATIVO E EXIBE O SPINNER */}\n                            {this.state.loading ? (\n                                <Spinner />\n                            ) : (\n                                    <div id=\"details\">\n                                        <img id=\"cardImg\" src={this.props.cardImage} className=\"card-img-top img-thumbnail mb-3\" alt=\"\" style={style.cardImage} />\n                                        <h6 id=\"cardSpecies\"><strong>Especie: </strong>{this.state.species.map(specie => <span key={specie}>{specie}, </span>)}</h6>\n                                        <h6 id=\"cardHeight\"><strong>Altura: </strong>{this.state.height}</h6>\n                                        <h6 id=\"cardHair\"><strong>Cabelo: </strong>{this.state.hair}</h6>\n                                        <h6 id=\"cardHomeworld\"><strong>Planeta: </strong>{this.state.homeworld}</h6>\n                                        <h6 id=\"cardFilms\"><strong>Filmes: </strong>{this.state.films.map(film => <span key={film}>{film}, </span>)}</h6>\n                                        <h6 id=\"cardVehicles\"><strong>Veiculos: </strong>{this.state.vehicles.map(vehicle => <span key={vehicle}>{vehicle}, </span>)}</h6>\n                                    </div>\n                                )}\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button id=\"close\"type=\"button\" className=\"btn btn-dark\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst style = {\n    cardImage: {\n        maxWeight: 100,\n        maxHeight: 250\n    }\n}\n\nexport default Details","import React, { Component } from 'react'\nimport GoogleImages from 'google-images';\nimport { CSE_ID, API_KEY } from '../utils/googleImages'\nimport { connect } from 'react-redux'\nimport { updateScore } from '../actions'\nimport Details from './Details'\nimport Spinner from './Spinner'\n\nexport class Card extends Component {\n    state = {\n        // ARMAZENA A IMAGEM RECEBIDA PELA API DO GOOGLE IMAGENS\n        cardImage: {\n            thumbnail: '',\n            image: ''\n        },\n        // ARMAZENA O PALPITE DO USUARIO\n        userGuess: '',\n        // EXIBE O CAMPO PARA DIGITAR O PALPITE\n        showInput: false,\n        // ARMAZENA SE O USUARIO CLICOU EM DETALHES (PARA DIMINUIR 5 PONTOS CASO ELE ACERTE)\n        clickedDetails: false,\n        // CLASSES QUE SERAO ADICIONADAS AO CARD\n        newClasses: 'rgba-grey-slight',\n        // INICIA O COMPONENTE COM O LOADING EM TRUE\n        loading: true\n    }\n\n    // REQUISITA AS IMAGENS DOS CARTOES\n    componentDidMount() {\n        this.getImageToCard(this.props.card)\n    }\n\n    // UTILIZA API DO GOOGLE PARA PESQUISAR E RETORNAR IMAGENS\n    getImageToCard = card => {\n        const client = new GoogleImages(CSE_ID, API_KEY);\n        client.search(`${card.name} star wars`)\n            .then(response => {\n                this.setState({\n                    cardImage: {\n                        thumbnail: response[0].thumbnail.url,\n                        image: response[0].url\n                    },\n                    // FINALIZA O LOADING AO CARREGAR TODAS AS IMAGENS DOS CARTOES\n                    loading: false\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    // EXIBE O INPUT PARA DIGITAR O PALPITE DO USUARIO\n    onPressGuess = () => {\n        this.setState({\n            showInput: true\n        })\n    }\n\n    // FUNÇAO É CHAMADA APÓS O USUARIO CLICAR EM OK NO INPUT DO PALPITE\n    // ATUALIZA A STORE COM A PONTUAÇAO (10 PONTOS CASO NAO TENHA CLICADO EM DETALHES E 5 CASO TENHA)\n    // ESCONDE O CARTAO PARA QUE O USUARIO NAO JOGUE NOVAMENTE COM O MESMO CARTAO\n    onPressSendGuess = () => {\n        let userGuess = this.state.userGuess.toUpperCase()\n        let cardName = this.props.card.name.toUpperCase()\n        let clickedDetails = this.state.clickedDetails\n        // VERIFICA SE O USUARIO DIGITOU ALGO NO CAMPO\n        if (userGuess !== '') {\n            // VERIFICA SE O USUARIO ACERTOU\n            if (cardName === userGuess) {\n                // CHAMA A FUNÇAO QUE MUDA O BACKGROUND DO CARTAO E O DESABILITA\n                this.addNewClasses(true)\n                // VERIFICA SE O USUARIO CLICOU NO BOTAO DETALHES\n                if (clickedDetails) {\n                    //ATUALIZA O SCORE COM 5 PONTOS\n                    this.props.dispatch(updateScore(5))\n                } else {\n                    // ATUALIZA O SCORE COM 10 PONTOS\n                    this.props.dispatch(updateScore(10))\n                }\n            } else {\n                // CHAMA A FUNÇAO QUE MUDA O BACKGROUND DO CARTAO E O DESABILITA\n                this.addNewClasses(false)\n            }\n\n            // ESCONDE O INPUT\n            this.setState({\n                showInput: false\n            })\n        }\n    }\n\n    // ATUALIZA O STATE COM O PALPITE DO USUARIO\n    onChangeGuess = event => {\n        this.setState({\n            userGuess: event.target.value\n        })\n    }\n\n    // VERIFICA SE O JOGAR CLICOU EM EXIBIR OS DETALHES DO CARTAO (PERDE 5 PONTOS)\n    onClickDetails = () => {\n        this.setState({\n            clickedDetails: true\n        })\n    }\n\n    // ADICIONA CLASSES AO CARTAO APOS USUARIO ENVIAR O PALPITE\n    addNewClasses = (status) => {\n        // VERIFICA SE O USUARIO ACERTOU OU ERROU\n        // SE ACERTOU MUDA O BACKGROUND PARA VERDE E DESABILITA O BOTAO\n        if (status) {\n            this.setState({\n                newClasses: `mask flex-center rgba-green-light disabled`\n            })\n            // SE ERROU MUDA O BACKGROUND PARA VERMELHO E DESABILITA O BOTAO\n        } else {\n            this.setState({\n                newClasses: `mask flex-center rgba-red-light disabled`\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {/* VERIFICA SE O LOADING ESTA ATIVO E EXIBE O SPINNER */}\n                {this.state.loading ? (\n                    <Spinner />\n                ) : (\n                        <div>\n                            <div id=\"card\" className={`card container mb-3 view overlay zoom ${this.state.newClasses}`} style={style.card}>\n                                <img src={this.state.cardImage.image} className=\"card-img-top mt-3 img-fluid z-depth-1 border\" alt=\"\" style={style.cardImage} />\n                                <div className=\"card-body\">\n                                    <div className=\"\">\n                                        {/* EXIBE O INPUT DE PALPITE QUANDO O USUARIO CLICA EM ADVINHAR */}\n                                        {this.state.showInput ? (\n                                            <div className=\"input-group mb-3\">\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"Nome\" value={this.state.userGuess} onChange={event => this.onChangeGuess(event)} />\n                                                <div className=\"input-group-append\">\n                                                    <button className=\"input-group-text btn-dark\" onClick={this.onPressSendGuess}>Ok</button>\n                                                </div>\n                                            </div>\n                                        ) : (\n                                                <button className=\"btn btn-light btn-block mb-2\" onClick={this.onPressGuess}>Advinhar</button>\n                                            )}\n                                        <button className=\"btn btn-dark btn-block\" data-toggle=\"modal\" data-target={`#${(this.props.cardId)}`} onClick={this.onClickDetails}>Detalhes</button>\n                                    </div>\n                                </div>\n                            </div>\n                            {/* MODAL DETALHES */}\n                            <Details card={this.props.card} cardImage={this.state.cardImage.image} cardId={this.props.cardId} />\n                        </div>\n                    )}\n            </div>\n        )\n    }\n}\n\nconst style = {\n    cardImage: {\n        maxWeight: 110,\n        maxHeight: 110\n    },\n    card: {\n        width: \"16em\"\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\nexport default connect(mapStateToProps)(Card)","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStopwatch } from '@fortawesome/free-solid-svg-icons'\nimport Countdown from 'react-countdown-now';\nimport { connect } from 'react-redux'\nimport { gameStatus } from '../actions'\n\nconst Timer = props => {\n    // FUNÇAO É CHAMADA APÓS O TERMINO DO CONTADOR\n    const updateGameStatus = () => {\n        // SETA O STATUS DO JOGO PARA FALSE (TEMPO ACABOU)\n        props.dispatch(gameStatus(false))\n    }\n\n    return (\n        <div>\n            {/* ESCONDE / EXIBE O TIMER APOS CHECAR O STATUS DO JOGO */}\n            {props.game.status &&\n                <div className=\"text-right mr-5 mt-1 animated slideInRight\">\n                    <FontAwesomeIcon icon={faStopwatch} size=\"2x\" />\n                    <h3 className=\"float-right ml-2\">\n                        {/* TIMER QUE APOS 2 MINUTOS (120000) RETORNA UMA FUNÇAO */}\n                        <Countdown date={Date.now() + 120000} renderer={({ minutes, seconds }) => { return <span>{minutes}:{seconds}</span> }} onComplete={updateGameStatus} />\n                    </h3>\n                </div>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps)(Timer)","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass GameOver extends Component {\n    state = {\n        name: '',\n        email: ''\n    }\n    \n    // FUNÇAO QUE É CHAMADA AO CLICAR NO BOTAO SALVAR, ATUALIZA / CRIA A LOCALSTORAGE\n    onSaveScore = () => {\n        if(this.state.name !== '' && this.state.email !== ''){\n            if(localStorage.length > 0){\n                this.addPlayerToLocalStorage()\n            }else{\n                localStorage.setItem('players', JSON.stringify([]))\n                this.addPlayerToLocalStorage()\n            }\n            this.props.history.push('/ranking')\n        }   \n    }\n\n    // ADICIONAR UM NOVO PLAYER A LISTA DE PLAYERS DA LOCALSTORAGE\n    addPlayerToLocalStorage = () => {\n        let players = JSON.parse(localStorage.getItem('players'))\n        let newPlayer = {\n            name: this.state.name,\n            email: this.state.email,\n            score: this.props.score\n        }\n        players.push(newPlayer)\n        localStorage.setItem('players', JSON.stringify(players))        \n    }\n\n    // ATUALIZA O STATE NAME\n    onChangeName = event => {\n        this.setState({\n            name: event.target.value\n        })\n    }\n\n    // ATUALIZA O STATE EMAIL\n    onChangeEmail = event => {\n        this.setState({\n            email: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"jumbotron p-0 animated slideInDown\">\n                    <div className=\"view overlay rounded-top\">\n                        <img src=\"http://i.imgur.com/vXzudMx.jpg\" className=\"img-fluid\" alt=\"\" />\n                    </div>\n                    <div className=\"card-body text-center mb-3\">\n                        <h3 className=\"card-title h3 mt-3 mb-3\"><strong>Fim de Jogo</strong></h3>\n                        <h4 className=\"card-text mt-2 mb-4\">Placar: <strong>{this.props.score}</strong> pontos</h4>\n                        <div className=\"text-center border border-light p-4 container\">\n                            <p>Preencha o formulário abaixo para salvar sua pontuação.</p>\n                            <input type=\"text\" className=\"form-control mb-4\" placeholder=\"Nome*\" onChange={event => this.onChangeName(event)} required/>\n                            <input type=\"email\" className=\"form-control mb-4\" placeholder=\"E-mail*\" onChange={event => this.onChangeEmail(event)}/>\n                            <button className=\"btn btn-dark btn-block\" onClick={this.onSaveScore}>Salvar</button>\n                            <Link to=\"/\" className=\"btn btn-light btn-block mt-2\">Fechar</Link>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameOver","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { URL } from '../utils/api'\nimport { connect } from 'react-redux'\nimport Card from './Card'\nimport Timer from './Timer'\nimport GameOver from './GameOver'\nimport Spinner from './Spinner'\n\nexport class Game extends Component {\n    state = {\n        cards: {},\n        nextPage: null,\n        // INICIA O COMPONENT COM O LOADING EM TRUE\n        loading: true,\n        loadingMoreCards: false,\n        loadingMoreCardsNewClasses: ''\n    }\n\n    componentDidMount() {\n        if (this.props.game.status) {\n            // REQUISITA OS 10 PRIMEIROS PERSONAGENS CADASTRADOS NA API\n            this.getCards(URL)\n        } else {\n            // GARANTE QUE A PAGINA NAO SEJA ACESSADA SEM QUE O BOTAO DE INICIAR GAME TENHA SIDO CLICADO\n            this.props.history.push('/')\n        }\n    }\n\n    // REQUISITA OS 10 PERSONAGEM DA PROXIMA PAGINA PASSANDO A URL ARMAZENADA NO STATE nextPage\n    onClickNextPage = () => {\n        let nextPage = this.state.nextPage\n        let newClasses = `ml-2 spinner-border spinner-border-sm`\n        if (nextPage !== null) {\n            this.getCards(nextPage)\n            this.setState({\n                loadingMoreCardsNewClasses: newClasses\n            })\n        }\n    }\n\n    // REQUISITA OS PERSONAGENS A API STARWARS\n    getCards = (url) => {\n        axios.get(url)\n            .then(response => {\n                this.setState({\n                    cards: response.data.results,\n                    nextPage: response.data.next,\n                    previousPage: response.data.previous,\n                    // FINALIZA O LOADING AO CARREGAR OS CARTOES INICIAIS\n                    loading: false,\n                    loadingMoreCardsNewClasses: ''\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                {/* VERIFICA SE O LOADING ESTA ATIVO E EXIBE O SPINNER */}\n                {this.state.loading ? (\n                    <Spinner />\n                ) : (\n                        <div>\n                            {/* SE O STATUS DO JOGO FOR TRUE, (TEMPO DISPONIVEL) EXIBE OS CARTOES */}\n                            {this.props.game.status ? (\n                                <div>\n                                    <Timer />\n                                    <div className=\"container-fluid\">\n                                        <hr />\n                                        <div className=\"row\">\n                                            {Object.keys(this.state.cards).length > 0 &&\n                                                this.state.cards.map((card, index) => (\n                                                    <div key={card.name} className=\"col-lg-3 col-md-4 col-sm-6\"><Card card={card} cardId={`md${index}`} /></div>\n                                                ))\n                                            }\n                                        </div>\n                                        <hr />\n                                        <nav>\n                                            <button id=\"moreCards\" className={`btn btn-light btn-lg btn-block mb-3 ${this.state.nextPage === null && 'disabled'}`} onClick={this.onClickNextPage}>\n                                               Carregar Mais <span className={`${this.state.loadingMoreCardsNewClasses}`}></span>\n                                            </button>\n                                        </nav>\n                                    </div>\n                                </div>\n                                // SE O STATUS DO JOGO FOR FALSE, (TEMPO ACABOU), EXIBE O COMPONENT GAMEOVER\n                            ) : (\n                                    <GameOver score={this.props.game.score} history={this.props.history} />\n                                )}\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps)(Game)","export const URL = \"https://swapi.co/api/people/\"","import React from 'react'\n\nconst Ranking = () => {\n    // RECUPERAR JOGADORES DO LOCAL STORAGE\n    let players = JSON.parse(localStorage.getItem('players'))\n    \n    // ADICIONA UM JOGADOR TEMPORARIO AO PLACAR SEM JOGADORES\n    if(players === null){\n        players = [{\n            name: ' ', score: ' '\n        }]\n    }\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center \">StarQuiz!</h1>\n            <h3 className=\"text-center mt-2\">Ranking das Estrelas</h3>\n            {players !== null &&\n                <div className=\"table-wrapper-scroll-y mt-3 mb-5\">\n                    <table className=\"table table-bordered table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">Nome</th>\n                                <th scope=\"col\">Pontos</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {players\n                                .sort(function (a, b) {\n                                    return b.score - a.score\n                                })\n                                .map((player, index) => (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{index + 1}</th>\n                                        <td>{player.name}</td>\n                                        <td>{player.score}</td>\n                                    </tr>\n                                ))}\n                        </tbody>\n                    </table>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Ranking","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport Home from './Home'\nimport About from './About'\nimport Game from './Game'\nimport Ranking from './Ranking'\n\nconst Routes = () => {\n    return (\n        <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/game\" component={Game} />\n            <Route path=\"/ranking\" component={Ranking} />\n        </div>\n    )\n}\n\nexport default Routes","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { LOGO } from '../utils/images'\n\n// PARA UTLIZAR O HISTORY EM UM COMPONENT FORA DO <ROUTER />\nimport { withRouter } from \"react-router\";\n\nexport class Nav extends Component {\n    render() {\n        const pathName = this.props.location.pathname\n        return (\n            <nav className=\"navbar navbar-expand-md navbar-light bg-light mb-3 animated slideInDown fixed-top scrolling-navbar\">\n                <Link id=\"linkLogo\" className=\"navbar-brand\" to=\"/\"><img id=\"logo\" src={LOGO} alt=\"\" className=\"img-fluid\" style={style.logo}></img><span className=\"ml-2\"><strong>StarQuiz</strong></span></Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className={`nav-item ${pathName === '/' && 'active'}`}>\n                            <Link id=\"linkHome\" className=\"nav-link\" to=\"/\">Inicio</Link>\n                        </li>\n                        <li className={`nav-item ${pathName === '/about' && 'active'}`}>\n                            <Link id=\"linkAbout\" className=\"nav-link\" to=\"/about\">Sobre</Link>\n                        </li>\n                        <li className={`nav-item ${pathName === '/ranking' && 'active'}`}>\n                            <Link id=\"linkRanking\" className=\"nav-link\" to=\"/ranking\">Placar</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nconst style = {\n    logo: {\n        maxHeight: 50\n    }\n}\n\n// CONECTA O COMPONENT COM O <ROUTER />\nconst NavWithRouter = withRouter(Nav)\n\nexport default (NavWithRouter)","import React from 'react';\nimport Routes from './components/Routes'\nimport Nav from './components/Nav'\n\nconst App = () => {\n  return (\n    <div>\n      <Nav />\n      <Routes />\n    </div>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\nimport { GAME_STATUS, UPDATE_SCORE, RESET_SCORE } from '../actions'\n\nconst game = (state = { status: false, score: 0 }, action) => {\n    switch (action.type) {\n        case GAME_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        case UPDATE_SCORE:\n            state.score += action.score\n            return state\n        case RESET_SCORE:\n           return {\n               ...state,\n               score: 0\n           }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({\n    game\n})","// IMPORTA O MDBOOTSTRAP\nimport 'mdbootstrap/css/bootstrap.min.css'\nimport 'mdbootstrap/css/mdb.min.css'\n\n// IMPORTA O JQUERY\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n// IMPORTA O CUSTOM CSS\nimport './index.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\n// REDUX\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\n// STORE\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}